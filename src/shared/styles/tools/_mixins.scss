@use 'sass:list';
@use 'functions' as *;

//------------------ @media:

@mixin media-min-width($bp) {
  @media screen and(min-width: $bp) {
    @content;
  }
}

@mixin media-max-width($bp) {
  @media screen and(max-width: $bp) {
    @content;
  }
}

@mixin media-min-max-width($bp-min, $bp-max) {
  @media screen and(min-width: $bp-min) and(max-width: $bp-max) {
    @content;
  }
}

@mixin if-hover-supported() {
  @media (hover: hover) {
    @content;
  }
}

// ----------------- Grid column

@mixin grid-col($size, $gap, $columns: 12) {
  $gap-column: if(list.length($gap) == 1, $gap, list.nth($gap, 2));
  $calc: none;

  @if ($gap-column == 0) {
    $calc: #{(100% / $columns) * $size};
  } @else {
    $calc: calc(#{(100% / $columns) * $size} - #{$gap-column});
  }

  grid-template-columns: repeat(auto-fit, minmax($calc, 1fr));
}

// ---------------- Fluid font size

@mixin fluid-font-size($f-s-min, $f-s-max, $bp-min, $bp-max) {
  $f-s-min-unit: unit($f-s-min);
  $f-s-max-unit: unit($f-s-max);

  @if ($f-s-min-unit == $f-s-max-unit) {
    $f-s-max-min-diff: strip-unit($f-s-max - $f-s-min);
    $bp-max-min-diff: strip-unit($bp-max - $bp-min);

    $f-s-max-min-diff: if(
      $f-s-min-unit == 'rem',
      $f-s-max-min-diff * 10,
      $f-s-max-min-diff
    );

    font-size: $f-s-min;

    @include media-min-width($bp-min) {
      font-size: calc(
        #{$f-s-min} + #{$f-s-max-min-diff} *
          ((100vw - #{$bp-min}) / #{$bp-max-min-diff})
      );
    }

    @include media-min-width($bp-max) {
      font-size: $f-s-max;
    }
  } @else {
    @error "$f-s-min and $f-s-max must have identical units.";
  }
}

// --------------- Letter spacing fix

@mixin letter-spacing-fix($value) {
  margin-right: -$value;
  letter-spacing: $value;
}

// ---------- Box shadow outline

@mixin box-shadow-outline(
  $parent-bg-color,
  $outline-color,
  $outline-width: 2px,
  $outline-offset: 2px
) {
  box-shadow: 0 0 0 $outline-offset $parent-bg-color,
    0 0 0 ($outline-width * 2) $outline-color;
}
